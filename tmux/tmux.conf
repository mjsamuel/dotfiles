# Remap prefix 
unbind C-b
set -g prefix M-space

bind \; command-prompt 

# Enable mouse mode
setw -g mouse on

# Use Alt with arrow keys to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Use Alt-number key to quickly switch windows 
bind -n M-0 select-window -t 0
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

# split panes using v and h (and unbind previous)
bind -n M-v split-window -h
bind -n M-h split-window -v
unbind '"'
unbind %

# Remap zoom
bind -n M-z resize-pane -Z

# Reload tmux config
bind -n M-r source-file "~/.config/tmux/tmux.conf"\; \
    display-message "tmux configuration reloaded"

# Clears screen as well as the history
bind -n M-k send-keys -R \; \
    clear-history

# Quickly start a typing test
bind -n M-t split-window -h\; \
    send-keys "tt -n 20 -oneshot -noreport; exit" C-m
bind -n M-T split-window -v\; \
    send-keys "tt -n 20 -oneshot -noreport; exit" C-m

# Turn off scrolling on status bar
unbind-key -T root WheelUpStatus
unbind-key -T root WheelDownStatus

# Misc remaps
bind -n M-c new-window
bind -n M-l last-window
bind -n M-x kill-pane
bind -n M-, command-prompt -p "(rename window)" "rename-window '%%'"
bind -n M-. command-prompt "move-window"
bind -n M-s choose-tree -sZ
bind -n M-d detach-client

# Start windows at index 1
set -g base-index 1
setw -g pane-base-index 1

# Synchronize tmux and system clipboard
set -g set-clipboard on

# Fix issues when ssh-ing into tmux session
set -g default-terminal 'tmux-256color'
set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'

# Don't rename tabs when new command is run
set-option -g allow-rename off

# reduce escape time (for vim)
set -g escape-time 20

# Use vim keys in selection mode
set-window-option -g mode-keys vi

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Appearance tweaks
set -g message-style "bg=black, fg=white bold" # styling dialog when ':' is pressed
set -g mode-style "bg=yellow,fg=black" # styling line number indicator when scrolling

set -g status-position top
set -g status-style "bg=black, fg=white dim" # default styling for status bar items

# map applicaition name to icon
APP_ICON="#( \
if [ '#{pane_current_command}' = 'nvim' ]; then \
    echo '#[fg=green]#[default] '; \
elif [ '#{pane_current_command}' = 'zsh' ] || [ '#{pane_current_command}' = 'sh' ]; then
    echo '#[fg=orange]#[default] '; \
elif echo '#{pane_current_command}' | grep -q 'git'; then
    echo '#[fg=orange]#[default] '; \
elif echo '#{pane_current_command}' | grep -q 'python'; then
    echo '#[fg=yellow]#[default] '; \
elif echo '#{pane_current_command}' | grep -q 'node'; then
    echo '#[fg=green]#[default] '; \
elif [ '#{pane_current_command}' = 'bat' ]; then
    echo '#[fg=blue]#[default] '; \
elif [ '#{pane_current_command}' = 'brew' ]; then
    echo '#[fg=yellow]#[default] '; \
elif [ '#{pane_current_command}' = 'tt' ]; then
    echo '#[fg=white]#[default] '; \
fi
)"

# only display first letter of window name when screen is more taller than it is wide
NAME_FORMAT="$APP_ICON#([ $((#{client_width} / #{client_height})) -gt 1 ] && echo #{window_name} || echo #{window_name} | head -c1 )"

set -g window-status-format " #{window_index} $NAME_FORMAT "
set -g window-status-current-format " #{?window_zoomed_flag,,#{window_index}} $NAME_FORMAT "
set -g window-status-current-style 'fg=white, bg=terminal bold'
set -g window-status-separator ''

set -g status-left "#[bg=brightblack,fg=black] #{session_name} #[default]"
set -g status-right "%a %d/%m/%y %R  #(hostname) "
